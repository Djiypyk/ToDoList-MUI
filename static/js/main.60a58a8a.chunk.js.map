{"version":3,"sources":["serviceWorker.ts","store/todolist-reducer.ts","store/tasks-reducer.ts","store/store.ts","Components/AddItemForm.tsx","Components/EditableSpan.tsx","Components/Task1.tsx","Components/Todolist.tsx","AppWithRedux.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","initialState","removeTaskAC","taskID","todoListID","type","changeTaskStatusAC","isDone","changeTaskTitleAC","title","rootReducer","combineReducers","tasks","state","action","newTask","id","v1","filter","t","map","newTodoListID","copyState","todolists","todoListsState","tl","store","createStore","AddItemForm","React","memo","props","useState","setTitle","error","setError","addItem","trimmedTitle","trim","style","textAlign","TextField","variant","size","label","helperText","value","onChange","e","currentTarget","onKeyPress","key","IconButton","onClick","color","EditableSpan","editMode","setEditMode","offEditMode","changeTitle","autoFocus","onBlur","onDoubleClick","Task1","taskId","dispatch","useDispatch","task","useSelector","changeStatus","useCallback","newTaskStatus","checked","changeTaskTitle","newTitle","onRemoveTask","ListItem","divider","display","justifyContent","Checkbox","TodoList","addTask","changeTodoListTitle","tasksForTodoList","tasksList","onClickSetAllFilter","changeTodoListFilter","onClickSetActiveFilter","onClickSetCompletedFilter","removeTodoList","Grid","container","direction","flexDirection","height","position","item","Typography","align","fontWeight","List","ButtonGroup","disableElevation","fullWidth","bottom","Button","AppWithRedux","todoLists","removeTask","addTaskAC","changeTaskStatus","changeTasksTitle","changeTodoListTitleAC","changeTodolistFilterAC","addTodoList","addTodolistAC","todoListJSX","Paper","elevation","padding","width","className","AppBar","Toolbar","edge","aria-label","Menu","Container","fixed","spacing","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"0QAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,qCCeAC,EAAoC,GCOpCA,EAA+B,GAgDxBC,EAAe,SAACC,EAAgBC,GACzC,MAAO,CAACC,KApFe,cAoFIF,SAAQC,eAE1BE,EAAqB,SAACH,EAAgBI,EAAiBH,GAChE,MAAO,CAACC,KArFsB,qBAqFIF,SAAQI,SAAQH,eAEzCI,EAAoB,SAACL,EAAgBM,EAAeL,GAC7D,MAAO,CAACC,KA3FqB,oBA2FIF,SAAQM,QAAOL,e,QCxF9CM,EAAcC,YAAgB,CAChCC,MDkCwB,WAA+D,IAA9DC,EAA6D,uDAArDZ,EAAca,EAAuC,uCACtF,OAAQA,EAAOT,MACX,IAtCgB,WAuCZ,IAAMU,EAAU,CAACC,GAAIC,cAAMR,MAAOK,EAAOL,MAAOF,QAAQ,GACxD,OAAO,2BACAM,GADP,kBACeC,EAAOV,WADtB,CAEQW,GAFR,mBAEoBF,EAAMC,EAAOV,gBAGrC,IA9CmB,cA+Cf,OAAO,2BACAS,GADP,kBACeC,EAAOV,WAAaS,EAAMC,EAAOV,YACvCc,QAAO,SAAAC,GAAC,OAAIA,EAAEH,KAAOF,EAAOX,YAGzC,IAlD0B,qBAmDtB,OAAO,2BACAU,GADP,kBACeC,EAAOV,WAAaS,EAAMC,EAAOV,YACvCgB,KAAI,SAAAD,GAAC,OAAIA,EAAEH,KAAOF,EAAOX,OAAhB,2BAA6BgB,GAA7B,IAAgCZ,OAAQO,EAAOP,SAAUY,OAG/E,IA3DyB,oBA4DrB,OAAO,2BACAN,GADP,kBACeC,EAAOV,WAAaS,EAAMC,EAAOV,YACvCgB,KAAI,SAAAD,GAAC,OAAIA,EAAEH,KAAOF,EAAOX,OAAhB,2BAA6BgB,GAA7B,IAAgCV,MAAOK,EAAOL,QAASU,OAG7E,IDhEwB,mBCiEpB,OAAO,2BAAIN,GAAX,kBAAmBC,EAAOO,cAAgB,KAE9C,IDpEuB,kBCqEnB,IAAMC,EAAS,eAAOT,GAEtB,cADOS,EAAUR,EAAOE,IACjBM,EAIX,QACI,OAAOT,ICvEfU,UF0B4B,WAA6E,IAA5EC,EAA2E,uDAA1DvB,EAAca,EAA4C,uCACxG,OAAQA,EAAOT,MACX,IAjCuB,kBAkCnB,OAAOmB,EAAeN,QAAO,SAAAO,GAAE,OAAIA,EAAGT,KAAOF,EAAOE,MACxD,IApC8B,wBAqC1B,OAAOQ,EAAeJ,KAAI,SAAAD,GAAC,OAAIA,EAAEH,KAAOF,EAAOE,GAAhB,2BAAyBG,GAAzB,IAA4BV,MAAOK,EAAOL,QAASU,KACtF,IApCwB,mBAsCpB,MAAM,GAAN,mBAAWK,GAAX,CAA2B,CAACR,GAAIF,EAAOO,cAAeZ,MAAOK,EAAOL,MAAOS,OAAQ,SACvF,IAtC8B,yBAuC1B,OAAOM,EAAeJ,KAAI,SAAAK,GAAE,OAAIA,EAAGT,KAAOF,EAAOE,GAAjB,2BAA0BS,GAA1B,IAA8BP,OAAQJ,EAAOI,SAAUO,KAC3F,QACI,OAAOD,MEnCNE,EAAQC,YAAYjB,GAMjCb,OAAO6B,MAAQA,E,+DCTFE,EAAcC,IAAMC,MAAK,SAACC,GACnC,MAA0BC,mBAAiB,IAA3C,mBAAOvB,EAAP,KAAcwB,EAAd,KACA,EAA0BD,oBAAkB,GAA5C,mBAAOE,EAAP,KAAcC,EAAd,KAWMC,EAAU,WACZ,IAAMC,EAAe5B,EAAM6B,OACvBD,EACAN,EAAMK,QAAQC,GAEdF,GAAS,GAEbF,EAAS,KAGb,OACI,yBAAKM,MAAO,CAACC,UAAW,WACpB,kBAACC,EAAA,EAAD,CACIP,MAAOA,EACPQ,QAAS,WACTC,KAAM,QACNC,MAAO,iBACPC,WAAYX,GAAS,qBACrBY,MAAOrC,EACPsC,SA5Ba,SAACC,GACtBf,EAASe,EAAEC,cAAcH,OACzBX,GAAS,IA2BDe,WAzBc,SAACF,GACT,UAAVA,EAAEG,KACFf,OAyBA,kBAACgB,EAAA,EAAD,CAAYC,QAASjB,GACjB,kBAAC,IAAD,CACIkB,MAAO,iBCvCbC,EAAe1B,IAAMC,MAAM,SAACC,GACtC,MAA0BC,mBAAiB,IAA3C,mBAAOvB,EAAP,KAAcwB,EAAd,KACA,EAAgCD,oBAAkB,GAAlD,mBAAOwB,EAAP,KAAiBC,EAAjB,KASMC,EAAc,WAChBD,GAAY,GACZ1B,EAAM4B,YAAYlD,IAKtB,OAAQ+C,EACE,kBAACf,EAAA,EAAD,CACES,WALkB,SAACF,GACb,UAAVA,EAAEG,KAAiBO,KAKfX,SAjBa,SAACC,GACtBf,EAASe,EAAEC,cAAcH,QAiBjBA,MAAOrC,EACPmD,WAAS,EACTC,OAAQH,IACV,0BAAMI,cAlBG,WACfL,GAAY,GACZxB,EAASF,EAAMtB,SAgByBsB,EAAMtB,U,+EClBzCsD,EAAQlC,IAAMC,MAAK,YAAyC,IAAvC1B,EAAsC,EAAtCA,WAAW4D,EAA2B,EAA3BA,OACnCC,EAAWC,cAEbC,EAAOC,aAAwC,SAAAvD,GAAK,OAAIA,EAAMD,MAAMR,GAAYc,QAAO,SAAAC,GAAC,OAAIA,EAAEH,KAAOgD,KAAQ,MAE3GK,EAAeC,uBAAY,SAACtB,GAC9B,IAAMuB,EAAgBvB,EAAEC,cAAcuB,QACtCP,EAAS3D,EAAmB0D,EAAQO,EAAenE,MACrD,CAAC6D,EAASD,EAAO5D,IAEbqE,EAAkBH,uBAAY,SAACI,GACjCT,EAASzD,EAAkBwD,EAAQU,EAAUtE,MAC7C,CAAC6D,EAAU7D,EAAY4D,IAErBW,EAAeL,uBAAY,WAC7BL,EAAS/D,EAAa8D,EAAQ5D,MAC/B,CAAC6D,EAAUD,EAAQ5D,IAEtB,OAAO,kBAACwE,EAAA,EAAD,CAAUzB,IAAKa,EAAQa,SAAO,EACpBtC,MAAO,CAACuC,QAAS,OAAQC,eAAgB,kBACtD,kBAACC,EAAA,EAAD,CACIR,QAASL,EAAK5D,OACdwC,SAAUsB,IAEd,kBAACd,EAAD,CAAc9C,MAAO0D,EAAK1D,MAAOkD,YAAac,IAC9C,kBAACrB,EAAA,EAAD,CAAYC,QAASsB,GACjB,kBAAC,IAAD,CAA2BrB,MAAO,iBCqE/B2B,EAvFEpD,IAAMC,MAAK,SAACC,GAEzB,IAAMmD,EAAUZ,uBAAY,SAAC7D,GACzBsB,EAAMmD,QAAQzE,EAAOsB,EAAM3B,cAC5B,CAAC2B,EAAMmD,QAASnD,EAAM3B,aAEnB+E,EAAsBb,uBAAY,SAAC7D,GACrCsB,EAAMoD,oBAAoB1E,EAAOsB,EAAM3B,cACxC,CAAC2B,EAAMoD,oBAAqBpD,EAAM3B,aAEjCgF,EAAmBrD,EAAMnB,MACR,WAAjBmB,EAAMb,SACNkE,EAAmBA,EAAiBlE,QAAO,SAAAC,GAAC,OAAKA,EAAEZ,WAElC,cAAjBwB,EAAMb,SACNkE,EAAmBA,EAAiBlE,QAAO,SAAAC,GAAC,OAAIA,EAAEZ,WAGtD,IAAM8E,EAAYD,EAAiBhE,KAAI,SAACD,GACpC,OAAO,kBAAC4C,EAAD,CAAOZ,IAAKhC,EAAEH,GAAIgD,OAAQ7C,EAAEH,GAAIZ,WAAY2B,EAAM3B,gBASvDkF,EAAsBhB,uBAAY,kBAAMvC,EAAMwD,qBAAqB,MAAOxD,EAAM3B,cAClF,CAAC2B,EAAMwD,qBAAsBxD,EAAM3B,aACjCoF,EAAyBlB,uBAAY,kBAAMvC,EAAMwD,qBAAqB,SAAUxD,EAAM3B,cACxF,CAAC2B,EAAMwD,qBAAsBxD,EAAM3B,aACjCqF,EAA4BnB,uBAAY,kBAAMvC,EAAMwD,qBAAqB,YAAaxD,EAAM3B,cAC9F,CAAC2B,EAAMwD,qBAAsBxD,EAAM3B,aACjCsF,EAAiBpB,uBAAY,kBAAMvC,EAAM2D,eAAe3D,EAAM3B,cAAa,CAAC2B,EAAM2D,eAAgB3D,EAAM3B,aAE9G,OACI,kBAACuF,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAW,UACvB,yBAAKtD,MAAO,CACRuC,QAAS,OACTgB,cAAe,SACff,eAAgB,gBAChBgB,OAAQ,QACRC,SAAU,aACX,kBAACL,EAAA,EAAD,CAAMM,MAAI,GACT,kBAACC,EAAA,EAAD,CAAYxD,QAAS,KAAMyD,MAAO,SAAU5D,MAAO,CAAC6D,WAAY,SAC5D,kBAAC7C,EAAD,CAAc9C,MAAOsB,EAAMtB,MAAOkD,YAAawB,IAE/C,kBAAC/B,EAAA,EAAD,CAAYC,QAASqC,EAAgBpC,MAAO,UAChCX,KAAM,SAAS,kBAAC,IAAD,SAG/B,kBAACgD,EAAA,EAAD,CAAMM,MAAI,GACN,kBAACrE,EAAD,CAAaQ,QAAS8C,IAEtB,kBAACmB,EAAA,EAAD,CAAM9D,MAAO,CAACC,UAAW,WACpB6C,IAGT,6BACI,kBAACiB,EAAA,EAAD,CAAa3D,KAAM,QAASD,QAAS,YAAa6D,kBAAgB,EACrDC,WAAS,EAACjE,MAAO,CAACyD,SAAU,WAAYS,OAAQ,MAEzD,kBAACC,EAAA,EAAD,CACIpD,MAAwB,QAAjBvB,EAAMb,OAAmB,YAAc,UAC9CmC,QAASiC,GAFb,OAKA,kBAACoB,EAAA,EAAD,CACIpD,MAAwB,WAAjBvB,EAAMb,OAAsB,YAAc,UACjDmC,QAASmC,GAFb,UAKA,kBAACkB,EAAA,EAAD,CACIpD,MAAwB,cAAjBvB,EAAMb,OAAyB,YAAc,UACpDmC,QAASoC,GAFb,oB,4CC2BTkB,MA/Ff,WAEI,IAAMC,EAAYxC,aAAmD,SAAAvD,GAAK,OAAIA,EAAMU,aAC9EX,EAAQwD,aAA8C,SAAAvD,GAAK,OAAIA,EAAMD,SACrEqD,EAAWC,cAGX2C,EAAavC,uBAAY,SAACnE,EAAgBC,GAC5C6D,EAAS/D,EAAaC,EAAQC,MAC/B,IACG8E,EAAUZ,uBAAY,SAAC7D,EAAeL,GACxC6D,EN+CiB,SAACxD,EAAeL,GACrC,MAAO,CAACC,KAhFY,WAgFII,QAAOL,WAAYA,GMhD9B0G,CAAUrG,EAAOL,MAC3B,CAAC6D,IACE8C,EAAmBzC,uBAAY,SAACnE,EAAgBI,EAAiBH,GACnE6D,EAAS3D,EAAmBH,EAAQI,EAAQH,MAC7C,IACG4G,EAAmB1C,uBAAY,SAACnE,EAAgBM,EAAeL,GACjE6D,EAASzD,EAAkBL,EAAQM,EAAOL,MAC3C,IAGGsF,EAAiBpB,uBAAY,SAAClE,GAChC,IAAIU,EPID,CAACT,KAjDmB,kBAiDIW,GOJGZ,GAC9B6D,EAASnD,KACV,IACGqE,EAAsBb,uBAAY,SAAC7D,EAAeL,GACpD6D,EPI6B,SAACjD,EAAYP,GAC9C,MAAO,CAACJ,KAvD0B,wBAuDIW,GAAIA,EAAIP,MAAOA,GOLxCwG,CAAsBxG,EAAOL,MACvC,IAEGmF,EAAuBjB,uBAAY,SAACpD,EAA0Bd,GAChE6D,EPQ8B,SAACjD,EAAYE,GAC/C,MAAO,CAACb,KA5D0B,yBA4DIW,KAAIE,UOT7BgG,CAAuB9G,EAAYc,MAC7C,IAGGiG,EAAc7C,uBAAY,SAAC7D,GAC7BwD,EPDqB,SAACxD,GAC1B,MAAO,CAACJ,KAzDoB,mBAyDII,MAAOA,EAAOY,cAAeJ,eOAhDmG,CAAc3G,MACxB,IAEG4G,EAAcT,EAAUxF,KAAI,SAAAK,GAC9B,OACI,kBAACkE,EAAA,EAAD,CAAMM,MAAI,EAAC9C,IAAK1B,EAAGT,IACf,kBAACsG,EAAA,EAAD,CAAOC,UAAW,EACXhF,MAAO,CACHiF,QAAS,OACTzB,OAAQ,QACR0B,MAAO,UAEd,6BACI,kBAAC,EAAD,CACIrH,WAAYqB,EAAGT,GACfE,OAAQO,EAAGP,OACXT,MAAOgB,EAAGhB,MACVG,MAAOA,EAAMa,EAAGT,IAChBkE,QAASA,EACT2B,WAAYA,EACZtB,qBAAsBA,EACtBwB,iBAAkBA,EAClBrB,eAAgBA,EAChBsB,iBAAkBA,EAClB7B,oBAAqBA,UAQ7C,OACI,yBAAKuC,UAAU,OACX,kBAACC,EAAA,EAAD,CAAQ3B,SAAS,UACb,kBAAC4B,EAAA,EAAD,CAASrF,MAAO,CAACwC,eAAgB,kBAC7B,kBAAC3B,EAAA,EAAD,CAAYyE,KAAK,QAAQvE,MAAM,UAAUwE,aAAW,QAChD,kBAACC,EAAA,EAAD,MACA,kBAAC7B,EAAA,EAAD,CAAYxD,QAAQ,MAApB,SAIJ,kBAACwD,EAAA,EAAD,CAAYxD,QAAQ,MAApB,aAGA,kBAACgE,EAAA,EAAD,CAAQpD,MAAM,UAAUZ,QAAS,YAAjC,WAGR,kBAACsF,EAAA,EAAD,CAAWC,OAAK,GACZ,kBAACtC,EAAA,EAAD,CAAMC,WAAS,EAACb,eAAgB,SAAUxC,MAAO,CAACiF,QAAS,SACvD,kBAAC5F,EAAD,CAAaQ,QAAS+E,KAE1B,kBAACxB,EAAA,EAAD,CAAMC,WAAS,EAACsC,QAAS,EAAGnD,eAAgB,UACvCsC,MC1GrBc,IAASC,OACL,kBAAC,IAAD,CAAU1G,MAAOA,GACb,kBAAC,EAAD,OACS2G,SAASC,eAAe,ST+HnC,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA3G,GACL4G,QAAQ5G,MAAMA,EAAM6G,c","file":"static/js/main.60a58a8a.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {FilterValuesType, TodoListType} from \"../App\";\r\nimport {v1} from \"uuid\";\r\n\r\nexport const CHANGE_TODO_LIST_TITLE = 'CHANGE-TODOLIST-TITLE'\r\nexport const REMOVE_TODOLIST = 'REMOVE-TODOLIST'\r\nexport const ADD_NEW_TODOLIST = 'ADD-NEW-TODOLIST'\r\nexport const CHANGE_TODOLIST_FILTER = 'CHANGE-TODOLIST-FILTER'\r\n\r\nexport type ActionType = AddTodoListAT | RemoveTodoListAT | ChangeTodoListAT | ChangeTodoListFilter\r\n\r\nexport type AddTodoListAT = {\r\n    type: typeof ADD_NEW_TODOLIST\r\n    title: string\r\n    newTodoListID: string\r\n}\r\n\r\nexport type RemoveTodoListAT = {\r\n    type: typeof REMOVE_TODOLIST\r\n    id: string\r\n}\r\n\r\nexport type ChangeTodoListAT = {\r\n    type: typeof CHANGE_TODO_LIST_TITLE\r\n    id: string\r\n    title: string\r\n}\r\n\r\nexport type ChangeTodoListFilter = {\r\n    type: typeof CHANGE_TODOLIST_FILTER\r\n    id: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nconst initialState: Array<TodoListType> = []\r\n\r\nexport const todolistsReducer = (todoListsState = initialState, action: ActionType): Array<TodoListType> => {\r\n    switch (action.type) {\r\n        case REMOVE_TODOLIST:\r\n            return todoListsState.filter(tl => tl.id !== action.id)\r\n        case CHANGE_TODO_LIST_TITLE:\r\n            return todoListsState.map(t => t.id === action.id ? {...t, title: action.title} : t)\r\n        case ADD_NEW_TODOLIST:\r\n\r\n            return [...todoListsState, {id: action.newTodoListID, title: action.title, filter: 'all'}]\r\n        case CHANGE_TODOLIST_FILTER:\r\n            return todoListsState.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        default:\r\n            return todoListsState\r\n\r\n    }\r\n}\r\n\r\nexport const removeTodoListAC = (todolistID: string): RemoveTodoListAT => {\r\n    return {type: REMOVE_TODOLIST, id: todolistID}\r\n}\r\n\r\n\r\nexport const changeTodoListTitleAC = (id: string, title: string): ChangeTodoListAT => {\r\n    return {type: CHANGE_TODO_LIST_TITLE, id: id, title: title}\r\n}\r\n\r\nexport const addTodolistAC = (title: string): AddTodoListAT => {\r\n    return {type: ADD_NEW_TODOLIST, title: title, newTodoListID: v1()}\r\n}\r\n\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType): ChangeTodoListFilter => {\r\n    return {type: CHANGE_TODOLIST_FILTER, id, filter}\r\n}\r\n","import {TasksStateType} from \"../App\";\r\nimport {v1} from \"uuid\";\r\nimport {ADD_NEW_TODOLIST, AddTodoListAT, REMOVE_TODOLIST, RemoveTodoListAT} from \"./todolist-reducer\";\r\n\r\nexport const CHANGE_TASK_TITLE = 'CHANGE-TASK-TITLE'\r\nexport const REMOVE_TASK = 'REMOVE-TASK'\r\nexport const ADD_TASK = 'ADD-TASK'\r\nexport const CHANGE_TASK_STATUS = 'CHANGE-TASK-STATUS'\r\n\r\ntype addTaskAT = {\r\n    type: typeof ADD_TASK\r\n    title: string\r\n    todoListID: string\r\n}\r\n\r\ntype RemoveTaskAT = {\r\n    type: typeof REMOVE_TASK\r\n    taskID: string\r\n    todoListID: string\r\n}\r\ntype ChangeTaskStatusAT = {\r\n    type: typeof CHANGE_TASK_STATUS\r\n    taskID: string\r\n    isDone: boolean\r\n    todoListID: string\r\n}\r\n\r\ntype ChangeTaskTitleAT = {\r\n    type: typeof CHANGE_TASK_TITLE\r\n    taskID: string\r\n    title: string\r\n    todoListID: string\r\n}\r\nexport type ActionType = addTaskAT\r\n    | RemoveTaskAT\r\n    | ChangeTaskStatusAT\r\n    | ChangeTaskTitleAT\r\n    | AddTodoListAT\r\n    | RemoveTodoListAT\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state = initialState, action: ActionType): TasksStateType => {\r\n    switch (action.type) {\r\n        case ADD_TASK: {\r\n            const newTask = {id: v1(), title: action.title, isDone: false}\r\n            return {\r\n                ...state, [action.todoListID]: [\r\n                    newTask, ...state[action.todoListID]]\r\n            }\r\n        }\r\n        case REMOVE_TASK: {\r\n            return {\r\n                ...state, [action.todoListID]: state[action.todoListID]\r\n                    .filter(t => t.id !== action.taskID)\r\n            }\r\n        }\r\n        case CHANGE_TASK_STATUS: {\r\n            return {\r\n                ...state, [action.todoListID]: state[action.todoListID]\r\n                    .map(t => t.id === action.taskID ? {...t, isDone: action.isDone} : t)\r\n            }\r\n        }\r\n        case CHANGE_TASK_TITLE: {\r\n            return {\r\n                ...state, [action.todoListID]: state[action.todoListID]\r\n                    .map(t => t.id === action.taskID ? {...t, title: action.title} : t)\r\n            }\r\n        }\r\n        case ADD_NEW_TODOLIST: {\r\n            return {...state, [action.newTodoListID]: []}\r\n        }\r\n        case REMOVE_TODOLIST: {\r\n            const copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        }\r\n\r\n\r\n        default:\r\n            return state\r\n\r\n    }\r\n}\r\n\r\nexport const addTaskAC = (title: string, todoListID: string): addTaskAT => {\r\n    return {type: ADD_TASK, title, todoListID: todoListID}\r\n}\r\nexport const removeTaskAC = (taskID: string, todoListID: string): RemoveTaskAT => {\r\n    return {type: REMOVE_TASK, taskID, todoListID}\r\n}\r\nexport const changeTaskStatusAC = (taskID: string, isDone: boolean, todoListID: string): ChangeTaskStatusAT => {\r\n    return {type: CHANGE_TASK_STATUS, taskID, isDone, todoListID}\r\n}\r\nexport const changeTaskTitleAC = (taskID: string, title: string, todoListID: string): ChangeTaskTitleAT => {\r\n    return {type: CHANGE_TASK_TITLE, taskID, title, todoListID}\r\n}","\r\nimport {tasksReducer} from './tasks-reducer';\r\nimport {todolistsReducer} from './todolist-reducer';\r\nimport {combineReducers, createStore} from 'redux';\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer);\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\nimport {IconButton, TextField} from \"@material-ui/core\";\nimport AddBoxIcon from '@material-ui/icons/AddBox';\n\n\ntype AddItemFormPropsType = {\n    addItem: (title: string) => void\n}\n\nexport const AddItemForm = React.memo((props: AddItemFormPropsType) => {\n    const [title, setTitle] = useState<string>(\"\");\n    const [error, setError] = useState<boolean>(false);\n\n    const onChangeSetTitle = (e: ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value)\n        setError(false)\n    }\n    const onKeyPressAddItem = (e: KeyboardEvent<HTMLInputElement>) => {\n        if (e.key === \"Enter\") {\n            addItem()\n        }\n    }\n    const addItem = () => {\n        const trimmedTitle = title.trim()\n        if (trimmedTitle) {\n            props.addItem(trimmedTitle)\n        } else {\n            setError(true)\n        }\n        setTitle(\"\")\n    }\n\n    return (\n        <div style={{textAlign: 'center'}}>\n            <TextField\n                error={error}\n                variant={'outlined'}\n                size={'small'}\n                label={'Enter new item'}\n                helperText={error && 'Title is required!'}\n                value={title}\n                onChange={onChangeSetTitle}\n                onKeyPress={onKeyPressAddItem}\n            />\n            <IconButton onClick={addItem}>\n                <AddBoxIcon\n                    color={'primary'}\n                />\n            </IconButton>\n        </div>\n    );\n})","import React, {ChangeEvent, KeyboardEvent, useState} from 'react'\r\nimport {TextField} from \"@material-ui/core\";\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    changeTitle: (newTitle: string) => void\r\n}\r\n\r\nexport const  EditableSpan = React.memo ((props: EditableSpanPropsType) => {\r\n    const [title, setTitle] = useState<string>(\"\");\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n\r\n    const onChangeSetTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    const onEditMode = () => {\r\n        setEditMode(true)\r\n        setTitle(props.title)\r\n    }\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        props.changeTitle(title)\r\n    }\r\n    const onKeyPressOffEditMode = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') offEditMode()\r\n    }\r\n    return (editMode\r\n            ? <TextField\r\n                onKeyPress={onKeyPressOffEditMode}\r\n                onChange={onChangeSetTitle}\r\n                value={title}\r\n                autoFocus\r\n                onBlur={offEditMode}/>\r\n            : <span onDoubleClick={onEditMode}>{props.title}</span>\r\n    )\r\n})\r\n\r\n","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport {TaskType} from \"../AppWithRedux\";\r\nimport {Checkbox, IconButton, ListItem} from \"@material-ui/core\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport DeleteForeverOutlinedIcon from \"@material-ui/icons/DeleteForeverOutlined\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../store/store\";\r\nimport {changeTaskStatusAC, changeTaskTitleAC, removeTaskAC} from \"../store/tasks-reducer\";\r\n\r\nexport type TaskPropsType = {\r\n    todoListID: string\r\n    taskId: string\r\n}\r\n\r\nexport const Task1 = React.memo(({todoListID,taskId}: TaskPropsType) => {\r\n    const dispatch = useDispatch()\r\n\r\n    let task = useSelector<AppRootStateType, TaskType>(state => state.tasks[todoListID].filter(t => t.id === taskId)[0])\r\n\r\n    const changeStatus = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        const newTaskStatus = e.currentTarget.checked\r\n        dispatch(changeTaskStatusAC(taskId, newTaskStatus, todoListID))\r\n    },[dispatch,taskId,todoListID])\r\n\r\n    const changeTaskTitle = useCallback((newTitle: string) => {\r\n        dispatch(changeTaskTitleAC(taskId, newTitle, todoListID))\r\n    } , [dispatch, todoListID, taskId])\r\n\r\n    const onRemoveTask = useCallback(() => {\r\n        dispatch(removeTaskAC(taskId, todoListID))\r\n    }, [dispatch, taskId, todoListID])\r\n\r\n    return <ListItem key={taskId} divider\r\n                     style={{display: 'flex', justifyContent: 'space-between'}}>\r\n        <Checkbox\r\n            checked={task.isDone}\r\n            onChange={changeStatus}\r\n        />\r\n        <EditableSpan title={task.title} changeTitle={changeTaskTitle}/>\r\n        <IconButton onClick={onRemoveTask}>\r\n            <DeleteForeverOutlinedIcon color={'primary'}/>\r\n        </IconButton>\r\n    </ListItem>\r\n})","import React, {useCallback} from 'react';\r\nimport {FilterValuesType, TaskType} from \"../App\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Button, ButtonGroup, Grid, IconButton, List, Typography} from \"@material-ui/core\";\r\nimport DeleteForeverOutlinedIcon from \"@material-ui/icons/DeleteForeverOutlined\";\r\nimport {Task1} from \"./Task1\";\r\n\r\ntype TodoListPropsType = {\r\n    title: string\r\n    todoListID: string\r\n    addTask: (title: string, todoListID: string) => void\r\n    tasks: Array<TaskType>\r\n    filter: FilterValuesType\r\n    removeTask: (id: string, todoListID: string) => void\r\n    changeTodoListFilter: (filter: FilterValuesType, todoListID: string) => void\r\n    changeTaskStatus: (id: string, isDone: boolean, todoListID: string) => void\r\n    removeTodoList: (todoListID: string) => void\r\n    changeTasksTitle: (taskID: string, title: string, todoListID: string) => void\r\n    changeTodoListTitle: (title: string, todoListID: string) => void\r\n}\r\n\r\nconst TodoList = React.memo((props: TodoListPropsType) => {\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todoListID);\r\n    }, [props.addTask, props.todoListID])\r\n\r\n    const changeTodoListTitle = useCallback((title: string) => {\r\n        props.changeTodoListTitle(title, props.todoListID)\r\n    }, [props.changeTodoListTitle, props.todoListID])\r\n\r\n    let tasksForTodoList = props.tasks\r\n    if (props.filter === \"active\") {\r\n        tasksForTodoList = tasksForTodoList.filter(t => !t.isDone);\r\n    }\r\n    if (props.filter === \"completed\") {\r\n        tasksForTodoList = tasksForTodoList.filter(t => t.isDone);\r\n    }\r\n\r\n    const tasksList = tasksForTodoList.map((t) => {\r\n        return <Task1 key={t.id} taskId={t.id} todoListID={props.todoListID}/>\r\n        // <Task key={props.todoListID}\r\n        //              todoListID={props.todoListID}\r\n        //              task={t}\r\n        //              removeTask={props.removeTask}\r\n        //              changeTaskStatus={props.changeTaskStatus}\r\n        //              changeTasksTitle={props.changeTasksTitle}/>\r\n    })\r\n\r\n    const onClickSetAllFilter = useCallback(() => props.changeTodoListFilter(\"all\", props.todoListID),\r\n        [props.changeTodoListFilter, props.todoListID])\r\n    const onClickSetActiveFilter = useCallback(() => props.changeTodoListFilter(\"active\", props.todoListID),\r\n        [props.changeTodoListFilter, props.todoListID])\r\n    const onClickSetCompletedFilter = useCallback(() => props.changeTodoListFilter(\"completed\", props.todoListID),\r\n        [props.changeTodoListFilter, props.todoListID])\r\n    const removeTodoList = useCallback(() => props.removeTodoList(props.todoListID), [props.removeTodoList, props.todoListID])\r\n\r\n    return (\r\n        <Grid container direction={\"column\"}>\r\n            <div style={{\r\n                display: 'flex',\r\n                flexDirection: 'column',\r\n                justifyContent: 'space-between',\r\n                height: '400px',\r\n                position: 'relative'\r\n            }}><Grid item>\r\n                <Typography variant={'h5'} align={'center'} style={{fontWeight: 'bold'}}>\r\n                    <EditableSpan title={props.title} changeTitle={changeTodoListTitle}/>\r\n\r\n                    <IconButton onClick={removeTodoList} color={'primary'}\r\n                                size={'small'}><DeleteForeverOutlinedIcon/></IconButton>\r\n                </Typography>\r\n            </Grid>\r\n                <Grid item>\r\n                    <AddItemForm addItem={addTask}/>\r\n\r\n                    <List style={{textAlign: 'center'}}>\r\n                        {tasksList}\r\n                    </List>\r\n                </Grid>\r\n                <div>\r\n                    <ButtonGroup size={'small'} variant={'contained'} disableElevation\r\n                                 fullWidth style={{position: 'absolute', bottom: '0'}}\r\n                    >\r\n                        <Button\r\n                            color={props.filter === 'all' ? 'secondary' : 'primary'}\r\n                            onClick={onClickSetAllFilter}\r\n                        >All\r\n                        </Button>\r\n                        <Button\r\n                            color={props.filter === 'active' ? 'secondary' : 'primary'}\r\n                            onClick={onClickSetActiveFilter}\r\n                        >Active\r\n                        </Button>\r\n                        <Button\r\n                            color={props.filter === 'completed' ? 'secondary' : 'primary'}\r\n                            onClick={onClickSetCompletedFilter}\r\n                        >Completed\r\n                        </Button>\r\n                    </ButtonGroup>\r\n                </div>\r\n\r\n            </div>\r\n        </Grid>\r\n\r\n    )\r\n})\r\n\r\nexport default TodoList;","import React, {useCallback} from 'react';\r\nimport './App.css';\r\nimport TodoList from \"./Components/Todolist\";\r\nimport {AddItemForm} from \"./Components/AddItemForm\";\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport {addTodolistAC, changeTodolistFilterAC, changeTodoListTitleAC, removeTodoListAC} from \"./store/todolist-reducer\";\r\nimport {addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC} from \"./store/tasks-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./store/store\";\r\nimport {TasksStateType} from \"./App\";\r\n\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\"\r\n\r\nexport type TodoListType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\n//C-R-U-D\r\nfunction AppWithRedux() {\r\n    //BLL:\r\n    const todoLists = useSelector<AppRootStateType, Array<TodoListType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const dispatch = useDispatch()\r\n\r\n//tasks:\r\n    const removeTask = useCallback((taskID: string, todoListID: string) => {\r\n        dispatch(removeTaskAC(taskID, todoListID))\r\n    }, [])\r\n    const addTask = useCallback((title: string, todoListID: string) => {\r\n        dispatch(addTaskAC(title, todoListID))\r\n    }, [dispatch])\r\n    const changeTaskStatus = useCallback((taskID: string, isDone: boolean, todoListID: string) => {\r\n        dispatch(changeTaskStatusAC(taskID, isDone, todoListID))\r\n    }, [])\r\n    const changeTasksTitle = useCallback((taskID: string, title: string, todoListID: string) => {\r\n        dispatch(changeTaskTitleAC(taskID, title, todoListID))\r\n    }, [])\r\n\r\n//todoLists:\r\n    const removeTodoList = useCallback((todoListID: string) => {\r\n        let action = removeTodoListAC(todoListID)\r\n        dispatch(action)\r\n    }, [])\r\n    const changeTodoListTitle = useCallback((title: string, todoListID: string) => {\r\n        dispatch(changeTodoListTitleAC(title, todoListID))\r\n    }, [])\r\n\r\n    const changeTodoListFilter = useCallback((filter: FilterValuesType, todoListID: string) => {\r\n        dispatch(changeTodolistFilterAC(todoListID, filter))\r\n    }, [])\r\n\r\n\r\n    const addTodoList = useCallback((title: string) => {\r\n        dispatch(addTodolistAC(title))\r\n    }, [])\r\n\r\n    const todoListJSX = todoLists.map(tl => {\r\n        return (\r\n            <Grid item key={tl.id}>\r\n                <Paper elevation={5}\r\n                       style={{\r\n                           padding: '15px',\r\n                           height: '400px',\r\n                           width: '300px'\r\n                       }}>\r\n                    <div>\r\n                        <TodoList\r\n                            todoListID={tl.id}\r\n                            filter={tl.filter}\r\n                            title={tl.title}\r\n                            tasks={tasks[tl.id]}\r\n                            addTask={addTask}\r\n                            removeTask={removeTask}\r\n                            changeTodoListFilter={changeTodoListFilter}\r\n                            changeTaskStatus={changeTaskStatus}\r\n                            removeTodoList={removeTodoList}\r\n                            changeTasksTitle={changeTasksTitle}\r\n                            changeTodoListTitle={changeTodoListTitle}\r\n                        />\r\n                    </div>\r\n                </Paper>\r\n            </Grid>)\r\n    })\r\n\r\n    //UI:\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar style={{justifyContent: \"space-between\"}}>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                        <Typography variant=\"h6\">\r\n                            News\r\n                        </Typography>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        TodoLists\r\n                    </Typography>\r\n                    <Button color=\"inherit\" variant={\"outlined\"}>Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container justifyContent={\"center\"} style={{padding: '15px'}}>\r\n                    <AddItemForm addItem={addTodoList}/>\r\n                </Grid>\r\n                <Grid container spacing={4} justifyContent={\"center\"}>\r\n                    {todoListJSX}\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AppWithRedux;\r\n\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {store} from \"./store/store\";\r\nimport {Provider} from \"react-redux\";\r\nimport AppWithRedux from \"./AppWithRedux\";\r\n\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <AppWithRedux/>\r\n    </Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}
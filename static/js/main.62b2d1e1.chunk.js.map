{"version":3,"sources":["AddItemForm.tsx","EditableSpan.tsx","Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForm","props","useState","title","setTitle","error","setError","addItem","trimmedTitle","trim","style","textAlign","TextField","variant","size","label","helperText","className","value","onChange","e","currentTarget","onKeyPress","key","IconButton","onClick","color","EditableSpan","editMode","setEditMode","offEditMode","changeTitle","autoFocus","onBlur","onDoubleClick","TodoList","tasksList","tasks","map","t","ListItem","id","divider","display","justifyContent","Checkbox","checked","isDone","changeTaskStatus","todoListID","newTitle","changeTasksTitle","removeTask","flexDirection","height","Typography","align","fontWeight","changeTodoListTitle","removeTodoList","addTask","List","ButtonGroup","disableElevation","fullWidth","Button","filter","changeTodoListFilter","App","todoListID_1","v1","todoListID_2","todoLists","setTodoLists","setTasks","tl","taskID","copyTasks","getTasksForRender","todoListComps","Grid","item","Paper","elevation","padding","width","AppBar","position","Toolbar","edge","aria-label","Menu","Container","fixed","container","newTodoListID","spacing","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.62b2d1e1.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\nimport {IconButton, TextField} from \"@material-ui/core\";\nimport AddBoxIcon from '@material-ui/icons/AddBox';\n\ntype AddItemFormPropsType = {\n    addItem: (title: string) => void\n}\n\nexport const AddItemForm = (props: AddItemFormPropsType) => {\n    const [title, setTitle] = useState<string>(\"\");\n    const [error, setError] = useState<boolean>(false);\n\n    const onChangeSetTitle = (e: ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value)\n        setError(false)\n    }\n    const onKeyPressAddItem = (e: KeyboardEvent<HTMLInputElement>) => {\n        if (e.key === \"Enter\") {\n            addItem()\n        }\n    }\n    const addItem = () => {\n        const trimmedTitle = title.trim()\n        if (trimmedTitle) {\n            props.addItem(trimmedTitle)\n        } else {\n            setError(true)\n        }\n        setTitle(\"\")\n    }\n\n    return (\n        <div style={{textAlign: 'center'}}>\n            <TextField\n                variant={'outlined'}\n                size={'small'}\n                label={'Enter item title'}\n                helperText={error && 'Title is required!'}\n                className={error ? \"error\" : \"\"}\n                value={title}\n                onChange={onChangeSetTitle}\n                onKeyPress={onKeyPressAddItem}\n            />\n            <IconButton onClick={addItem}>\n                <AddBoxIcon\n                    color={'primary'}\n                />\n            </IconButton>\n        </div>\n    );\n}","import React, {ChangeEvent, KeyboardEvent, useState} from 'react'\r\nimport {TextField} from \"@material-ui/core\";\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    changeTitle: (newTitle: string) => void\r\n}\r\n\r\nexport function EditableSpan(props: EditableSpanPropsType) {\r\n    const [title, setTitle] = useState<string>(\"\");\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n\r\n    const onChangeSetTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onEditMode = () => {\r\n        setEditMode(true)\r\n        setTitle(props.title)\r\n    }\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        props.changeTitle(title)\r\n    }\r\n    const onKeyPressOffEditMode = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') offEditMode()\r\n    }\r\n    return (editMode\r\n            ? <TextField\r\n                onKeyPress={onKeyPressOffEditMode}\r\n                onChange={onChangeSetTitle}\r\n                value={title}\r\n                autoFocus\r\n                onBlur={offEditMode}/>\r\n            : <span onDoubleClick={onEditMode}>{props.title}</span>\r\n    )\r\n}\r\n\r\n","import React, {ChangeEvent} from 'react';\r\nimport {FilterValuesType, TaskType} from \"./App\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Button, ButtonGroup, Checkbox, IconButton, List, ListItem, Typography} from \"@material-ui/core\";\r\nimport DeleteForeverOutlinedIcon from \"@material-ui/icons/DeleteForeverOutlined\";\r\n\r\ntype TodoListPropsType = {\r\n    title: string\r\n    todoListID: string\r\n    addTask: (title: string, todoListID: string) => void\r\n    tasks: Array<TaskType>\r\n    filter: FilterValuesType\r\n    removeTask: (id: string, todoListID: string) => void\r\n    changeTodoListFilter: (filter: FilterValuesType, todoListID: string) => void\r\n    changeTaskStatus: (id: string, isDone: boolean, todoListID: string) => void\r\n    removeTodoList: (todoListID: string) => void\r\n    changeTasksTitle: (taskID: string, title: string, todoListID: string) => void\r\n    changeTodoListTitle: (title: string, todoListID: string) => void\r\n}\r\n\r\nconst TodoList = (props: TodoListPropsType) => {\r\n    const tasksList = props.tasks.map((t: TaskType) => {\r\n        const removeTask = () => props.removeTask(t.id, props.todoListID)\r\n        const changeStatus = (e: ChangeEvent<HTMLInputElement>) =>\r\n            props.changeTaskStatus(t.id, e.currentTarget.checked, props.todoListID)\r\n\r\n        const changeTaskTitle = (newTitle: string) => {\r\n            props.changeTasksTitle(t.id, newTitle, props.todoListID)\r\n        }\r\n        return (\r\n            <ListItem key={t.id} divider style={{display: 'flex', justifyContent: 'space-between'}}>\r\n                <Checkbox\r\n                    checked={t.isDone}\r\n                    onChange={changeStatus}\r\n                />\r\n                <EditableSpan title={t.title} changeTitle={changeTaskTitle}/>\r\n                <IconButton onClick={removeTask}>\r\n                    <DeleteForeverOutlinedIcon color={'primary'}/></IconButton>\r\n            </ListItem>\r\n        )\r\n    })\r\n\r\n    const onClickSetAllFilter = () => props.changeTodoListFilter(\"all\", props.todoListID)\r\n    const onClickSetActiveFilter = () => props.changeTodoListFilter(\"active\", props.todoListID)\r\n    const onClickSetCompletedFilter = () => props.changeTodoListFilter(\"completed\", props.todoListID)\r\n    const removeTodoList = () => props.removeTodoList(props.todoListID)\r\n\r\n    const addTask = (title: string) => {\r\n        props.addTask(title, props.todoListID);\r\n    }\r\n    const changeTodoListTitle = (title: string) => {\r\n        props.changeTodoListTitle(title, props.todoListID)\r\n    }\r\n\r\n    return (\r\n        <div style={{\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            justifyContent: 'space-between',\r\n            height: '100%'\r\n        }}>\r\n            <Typography variant={'h5'} align={'center'} style={{fontWeight: 'bold'}}>\r\n                <EditableSpan title={props.title} changeTitle={changeTodoListTitle}/>\r\n\r\n                <IconButton onClick={removeTodoList} color={'primary'}\r\n                            size={'small'}><DeleteForeverOutlinedIcon/></IconButton>\r\n            </Typography>\r\n            <AddItemForm addItem={addTask}/>\r\n            <List style={{textAlign: 'center'}}>\r\n                {tasksList}\r\n            </List>\r\n            <div>\r\n                <ButtonGroup size={'small'} variant={'contained'} disableElevation\r\n                             fullWidth\r\n                >\r\n                    <Button\r\n                        color={props.filter === 'all' ? 'secondary' : 'primary'}\r\n                        onClick={onClickSetAllFilter}\r\n                    >All\r\n                    </Button>\r\n                    <Button\r\n                        color={props.filter === 'active' ? 'secondary' : 'primary'}\r\n                        onClick={onClickSetActiveFilter}\r\n                    >Active\r\n                    </Button>\r\n                    <Button\r\n                        color={props.filter === 'completed' ? 'secondary' : 'primary'}\r\n                        onClick={onClickSetCompletedFilter}\r\n                    >Completed\r\n                    </Button>\r\n                </ButtonGroup>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoList;","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport TodoList from \"./Todolist\";\r\nimport {v1} from \"uuid\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\n\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\"\r\n\r\nexport type TodoListType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\ntype TaskStateType = {\r\n    [id: string]: Array<TaskType>\r\n}\r\n\r\n\r\n//C-R-U-D\r\nfunction App() {\r\n    const todoListID_1 = v1()\r\n    const todoListID_2 = v1()\r\n\r\n\r\n    const [todoLists, setTodoLists] = useState<Array<TodoListType>>([\r\n        {id: todoListID_1, title: 'What to learn', filter: 'all'},\r\n        {id: todoListID_2, title: 'What to buy', filter: 'all'}\r\n    ])\r\n\r\n    const [tasks, setTasks] = useState<TaskStateType>(\r\n        {\r\n            [todoListID_1]: [\r\n                {id: v1(), title: \"HTML\", isDone: true},\r\n                {id: v1(), title: \"CSS\", isDone: true},\r\n                {id: v1(), title: \"JS/TS\", isDone: false}\r\n            ],\r\n            [todoListID_2]: [\r\n                {id: v1(), title: \"Meat\", isDone: true},\r\n                {id: v1(), title: \"Milk\", isDone: true},\r\n                {id: v1(), title: \"Beer\", isDone: false}\r\n            ]\r\n        }\r\n    )\r\n\r\n    //BLL:\r\n\r\n    const changeTodoListFilter = (filter: FilterValuesType, todoListID: string) => {\r\n        setTodoLists(todoLists.map(tl => tl.id === todoListID ? {...tl, filter: filter} : tl));\r\n    }\r\n\r\n    const removeTask = (taskID: string, todoListID: string) => {\r\n        const copyTasks = {...tasks}\r\n        copyTasks[todoListID] = tasks[todoListID].filter(t => t.id !== taskID)\r\n        setTasks(copyTasks)\r\n    }\r\n\r\n    const addTask = (title: string, todoListID: string) => {\r\n        const copyTasks = {...tasks}\r\n        copyTasks[todoListID] = [{id: v1(), title, isDone: true}, ...tasks[todoListID]]\r\n        setTasks(copyTasks)\r\n    }\r\n    const changeTaskStatus = (taskID: string, isDone: boolean, todoListID: string) => {\r\n        const copyTasks = {...tasks}\r\n        copyTasks[todoListID] = tasks[todoListID].map(t => t.id === taskID ? {...t, isDone} : t)\r\n        setTasks(copyTasks)\r\n    }\r\n    const changeTasksTitle = (taskID: string, title: string, todoListID: string) => {\r\n        setTasks({...tasks, [todoListID]: tasks[todoListID].map(t => t.id === taskID ? {...t, title} : t)})\r\n    }\r\n\r\n    const removeTodoList = (todoListID: string) => {\r\n        setTodoLists(todoLists.filter(tl => tl.id !== todoListID))\r\n        const copyTasks = {...tasks}\r\n        delete copyTasks[todoListID]\r\n        setTasks(copyTasks)\r\n    }\r\n    const changeTodoListTitle = (title: string, todoListID: string) => {\r\n        setTodoLists(todoLists.map(t => t.id === todoListID ? {...t, title} : t))\r\n    }\r\n    const addTodoList = (title: string) => {\r\n        const newTodoListID = v1()\r\n        setTodoLists([...todoLists, {id: newTodoListID, title, filter: 'all'}])\r\n        setTasks({...tasks, [newTodoListID]: []})\r\n\r\n\r\n    }\r\n\r\n    const getTasksForRender = (filter: FilterValuesType, tasks: Array<TaskType>): Array<TaskType> => {\r\n        switch (filter) {\r\n            case \"completed\":\r\n                return tasks.filter(t => t.isDone)\r\n            case \"active\":\r\n                return tasks.filter(t => !t.isDone)\r\n            default:\r\n                return tasks\r\n        }\r\n    }\r\n    const todoListComps = todoLists.map(tl => {\r\n        return (\r\n            <Grid item key={tl.id}>\r\n                <Paper elevation={5}\r\n                       style={{\r\n                           padding: '15px',\r\n                           height: '400px',\r\n                           width: '300px'\r\n                       }}>\r\n                    <TodoList\r\n                        todoListID={tl.id}\r\n                        filter={tl.filter}\r\n                        title={tl.title}\r\n                        tasks={getTasksForRender(tl.filter, tasks[tl.id])}\r\n                        addTask={addTask}\r\n                        removeTask={removeTask}\r\n                        changeTodoListFilter={changeTodoListFilter}\r\n                        changeTaskStatus={changeTaskStatus}\r\n                        removeTodoList={removeTodoList}\r\n                        changeTasksTitle={changeTasksTitle}\r\n                        changeTodoListTitle={changeTodoListTitle}\r\n                    />\r\n                </Paper>\r\n            </Grid>)\r\n    })\r\n\r\n    //UI:\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar style={{justifyContent: \"space-between\"}}>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        Todolists\r\n                    </Typography>\r\n                    <Button color=\"inherit\" variant={\"outlined\"}>Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container justifyContent={\"center\"} style={{padding: '15px'}}>\r\n                    <AddItemForm addItem={addTodoList}/>\r\n                </Grid>\r\n                <Grid container spacing={4} justifyContent={\"center\"}>\r\n                    {todoListComps}\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}
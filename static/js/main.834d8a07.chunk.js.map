{"version":3,"sources":["serviceWorker.ts","store/todolist-reducer.ts","store/tasks-reducer.ts","store/store.ts","Components/AddItemForm.tsx","Components/EditableSpan.tsx","Components/Todolist1.tsx","AppWithRedux1.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","initialState","changeTodolistFilterAC","id","filter","type","rootReducer","combineReducers","tasks","state","action","newTask","v1","title","isDone","todoListID","t","taskID","map","newTodoListID","copyState","todolists","todoListsState","tl","store","createStore","AddItemForm","props","useState","setTitle","error","setError","addItem","trimmedTitle","trim","style","textAlign","TextField","variant","size","label","helperText","value","onChange","e","currentTarget","onKeyPress","key","IconButton","onClick","color","EditableSpan","editMode","setEditMode","offEditMode","changeTitle","autoFocus","onBlur","onDoubleClick","TodoList1","dispatch","useDispatch","todolist","useSelector","todo","Grid","container","direction","display","flexDirection","justifyContent","height","position","item","Typography","align","fontWeight","changeTodoListTitleAC","addTaskAC","List","ListItem","divider","Checkbox","checked","newTitle","ButtonGroup","disableElevation","fullWidth","bottom","Button","AppWithRedux","todoLists","className","AppBar","Toolbar","edge","aria-label","Menu","Container","fixed","padding","addTodolistAC","spacing","Paper","elevation","width","Todolist1","ReactDOM","render","AppWithRedux1","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.834d8a07.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {FilterValuesType, TodoListType} from \"../App\";\r\nimport {v1} from \"uuid\";\r\n\r\nexport const CHANGE_TODO_LIST_TITLE = 'CHANGE-TODOLIST-TITLE'\r\nexport const REMOVE_TODOLIST = 'REMOVE-TODOLIST'\r\nexport const ADD_NEW_TODOLIST = 'ADD-NEW-TODOLIST'\r\nexport const CHANGE_TODOLIST_FILTER = 'CHANGE-TODOLIST-FILTER'\r\n\r\nexport type ActionType = AddTodoListAT | RemoveTodoListAT | ChangeTodoListAT | ChangeTodoListFilter\r\n\r\nexport type AddTodoListAT = {\r\n    type: typeof ADD_NEW_TODOLIST\r\n    title: string\r\n    newTodoListID: string\r\n}\r\n\r\nexport type RemoveTodoListAT = {\r\n    type: typeof REMOVE_TODOLIST\r\n    id: string\r\n}\r\n\r\nexport type ChangeTodoListAT = {\r\n    type: typeof CHANGE_TODO_LIST_TITLE\r\n    id: string\r\n    title: string\r\n}\r\n\r\nexport type ChangeTodoListFilter = {\r\n    type: typeof CHANGE_TODOLIST_FILTER\r\n    id: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nconst initialState: Array<TodoListType> = []\r\n\r\nexport const todolistsReducer = (todoListsState = initialState, action: ActionType): Array<TodoListType> => {\r\n    switch (action.type) {\r\n        case REMOVE_TODOLIST:\r\n            return todoListsState.filter(tl => tl.id !== action.id)\r\n        case CHANGE_TODO_LIST_TITLE:\r\n            return todoListsState.map(t => t.id === action.id ? {...t, title: action.title} : t)\r\n        case ADD_NEW_TODOLIST:\r\n\r\n            return [...todoListsState, {id: action.newTodoListID, title: action.title, filter: 'all'}]\r\n        case CHANGE_TODOLIST_FILTER:\r\n            return todoListsState.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        default:\r\n            return todoListsState\r\n\r\n    }\r\n}\r\n\r\nexport const removeTodoListAC = (todolistID: string): RemoveTodoListAT => {\r\n    return {type: REMOVE_TODOLIST, id: todolistID}\r\n}\r\n\r\n\r\nexport const changeTodoListTitleAC = (id: string, title: string): ChangeTodoListAT => {\r\n    return {type: CHANGE_TODO_LIST_TITLE, id: id, title: title}\r\n}\r\n\r\nexport const addTodolistAC = (title: string): AddTodoListAT => {\r\n    return {type: ADD_NEW_TODOLIST, title: title, newTodoListID: v1()}\r\n}\r\n\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType): ChangeTodoListFilter => {\r\n    return {type: CHANGE_TODOLIST_FILTER, id, filter}\r\n}\r\n","import {TasksStateType} from \"../App\";\r\nimport {v1} from \"uuid\";\r\nimport {ADD_NEW_TODOLIST, AddTodoListAT, REMOVE_TODOLIST, RemoveTodoListAT} from \"./todolist-reducer\";\r\n\r\nexport const CHANGE_TASK_TITLE = 'CHANGE-TASK-TITLE'\r\nexport const REMOVE_TASK = 'REMOVE-TASK'\r\nexport const ADD_TASK = 'ADD-TASK'\r\nexport const CHANGE_TASK_STATUS = 'CHANGE-TASK-STATUS'\r\n\r\ntype addTaskAT = {\r\n    type: typeof ADD_TASK\r\n    title: string\r\n    todoListID: string\r\n}\r\n\r\ntype RemoveTaskAT = {\r\n    type: typeof REMOVE_TASK\r\n    taskID: string\r\n    todoListID: string\r\n}\r\ntype ChangeTaskStatusAT = {\r\n    type: typeof CHANGE_TASK_STATUS\r\n    taskID: string\r\n    isDone: boolean\r\n    todoListID: string\r\n}\r\n\r\ntype ChangeTaskTitleAT = {\r\n    type: typeof CHANGE_TASK_TITLE\r\n    taskID: string\r\n    title: string\r\n    todoListID: string\r\n}\r\nexport type ActionType = addTaskAT\r\n    | RemoveTaskAT\r\n    | ChangeTaskStatusAT\r\n    | ChangeTaskTitleAT\r\n    | AddTodoListAT\r\n    | RemoveTodoListAT\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state = initialState, action: ActionType): TasksStateType => {\r\n    switch (action.type) {\r\n        case ADD_TASK: {\r\n            const newTask = {id: v1(), title: action.title, isDone: false}\r\n            return {\r\n                ...state, [action.todoListID]: [\r\n                    newTask, ...state[action.todoListID]]\r\n            }\r\n        }\r\n        case REMOVE_TASK: {\r\n            return {\r\n                ...state, [action.todoListID]: state[action.todoListID]\r\n                    .filter(t => t.id !== action.taskID)\r\n            }\r\n        }\r\n        case CHANGE_TASK_STATUS: {\r\n            return {\r\n                ...state, [action.todoListID]: state[action.todoListID]\r\n                    .map(t => t.id === action.taskID ? {...t, isDone: action.isDone} : t)\r\n            }\r\n        }\r\n        case CHANGE_TASK_TITLE: {\r\n            return {\r\n                ...state, [action.todoListID]: state[action.todoListID]\r\n                    .map(t => t.id === action.taskID ? {...t, title: action.title} : t)\r\n            }\r\n        }\r\n        case ADD_NEW_TODOLIST: {\r\n            return {...state, [action.newTodoListID]: []}\r\n        }\r\n        case REMOVE_TODOLIST: {\r\n            const copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        }\r\n\r\n\r\n        default:\r\n            return state\r\n\r\n    }\r\n}\r\n\r\nexport const addTaskAC = (title: string, todoListID: string): addTaskAT => {\r\n    return {type: ADD_TASK, title, todoListID: todoListID}\r\n}\r\nexport const removeTaskAC = (taskID: string, todoListID: string): RemoveTaskAT => {\r\n    return {type: REMOVE_TASK, taskID, todoListID}\r\n}\r\nexport const changeTaskStatusAC = (taskID: string, isDone: boolean, todoListID: string): ChangeTaskStatusAT => {\r\n    return {type: CHANGE_TASK_STATUS, taskID, isDone, todoListID}\r\n}\r\nexport const changeTaskTitleAC = (taskID: string, title: string, todoListID: string): ChangeTaskTitleAT => {\r\n    return {type: CHANGE_TASK_TITLE, taskID, title, todoListID}\r\n}","\r\nimport {tasksReducer} from './tasks-reducer';\r\nimport {todolistsReducer} from './todolist-reducer';\r\nimport {combineReducers, createStore} from 'redux';\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer);\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\nimport {IconButton, TextField} from \"@material-ui/core\";\nimport AddBoxIcon from '@material-ui/icons/AddBox';\n\n\ntype AddItemFormPropsType = {\n    addItem: (title: string) => void\n}\n\nexport const AddItemForm = (props: AddItemFormPropsType) => {\n    const [title, setTitle] = useState<string>(\"\");\n    const [error, setError] = useState<boolean>(false);\n\n    const onChangeSetTitle = (e: ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value)\n        setError(false)\n    }\n    const onKeyPressAddItem = (e: KeyboardEvent<HTMLInputElement>) => {\n        if (e.key === \"Enter\") {\n            addItem()\n        }\n    }\n    const addItem = () => {\n        const trimmedTitle = title.trim()\n        if (trimmedTitle) {\n            props.addItem(trimmedTitle)\n        } else {\n            setError(true)\n        }\n        setTitle(\"\")\n    }\n\n    return (\n        <div style={{textAlign: 'center'}}>\n            <TextField\n                error={error}\n                variant={'outlined'}\n                size={'small'}\n                label={'Enter new item'}\n                helperText={error && 'Title is required!'}\n                value={title}\n                onChange={onChangeSetTitle}\n                onKeyPress={onKeyPressAddItem}\n            />\n            <IconButton onClick={addItem}>\n                <AddBoxIcon\n                    color={'primary'}\n                />\n            </IconButton>\n        </div>\n    );\n}","import React, {ChangeEvent, KeyboardEvent, useState} from 'react'\r\nimport {TextField} from \"@material-ui/core\";\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    changeTitle: (newTitle: string) => void\r\n}\r\n\r\nexport function EditableSpan(props: EditableSpanPropsType) {\r\n    const [title, setTitle] = useState<string>(\"\");\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n\r\n    const onChangeSetTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onEditMode = () => {\r\n        setEditMode(true)\r\n        setTitle(props.title)\r\n    }\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        props.changeTitle(title)\r\n    }\r\n    const onKeyPressOffEditMode = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') offEditMode()\r\n    }\r\n    return (editMode\r\n            ? <TextField\r\n                onKeyPress={onKeyPressOffEditMode}\r\n                onChange={onChangeSetTitle}\r\n                value={title}\r\n                autoFocus\r\n                onBlur={offEditMode}/>\r\n            : <span onDoubleClick={onEditMode}>{props.title}</span>\r\n    )\r\n}\r\n\r\n","import React, {ChangeEvent} from 'react';\r\nimport {TaskType} from \"../App\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Button, ButtonGroup, Checkbox, Grid, IconButton, List, ListItem, Typography} from \"@material-ui/core\";\r\nimport DeleteForeverOutlinedIcon from \"@material-ui/icons/DeleteForeverOutlined\";\r\nimport {AppRootStateType} from \"../store/store\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {TodoListType} from \"../AppWithRedux\";\r\nimport {changeTodolistFilterAC, changeTodoListTitleAC, removeTodoListAC} from \"../store/todolist-reducer\";\r\nimport {addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC} from \"../store/tasks-reducer\";\r\n\r\ntype TodoListPropsType = {\r\n    id: string\r\n}\r\n\r\nconst TodoList1 = (props: TodoListPropsType) => {\r\n    const dispatch = useDispatch()\r\n    const todolist = useSelector<AppRootStateType, TodoListType>(state => state.todolists\r\n        .filter(todo => todo.id === props.id)[0])\r\n    let tasks = useSelector<AppRootStateType, Array<TaskType>>(state => state.tasks[props.id])\r\n\r\n    if (todolist.filter === \"active\") {\r\n        tasks = tasks.filter(t => !t.isDone);\r\n    }\r\n    if (todolist.filter === \"completed\") {\r\n        tasks = tasks.filter(t => t.isDone);\r\n    }\r\n\r\n    const onClickSetAllFilter = () => dispatch(changeTodolistFilterAC(props.id, \"all\"))\r\n    const onClickSetActiveFilter = () => dispatch(changeTodolistFilterAC(props.id, \"active\"))\r\n    const onClickSetCompletedFilter = () => dispatch(changeTodolistFilterAC(props.id, \"completed\"))\r\n\r\n    const addTask = (title: string) => {\r\n        dispatch(addTaskAC(title, props.id));\r\n    }\r\n    const removeTodoList = () => dispatch(removeTodoListAC(props.id))\r\n    const changeTodoListTitle = (title: string) => {\r\n        dispatch(changeTodoListTitleAC(title, props.id))\r\n    }\r\n\r\n    return (\r\n        <Grid container direction={\"column\"}>\r\n            <div style={{\r\n                display: 'flex',\r\n                flexDirection: 'column',\r\n                justifyContent: 'space-between',\r\n                height: '400px',\r\n                position: 'relative'\r\n            }}>\r\n                <Grid item>\r\n                    <Typography variant={'h5'} align={'center'} style={{fontWeight: 'bold'}}>\r\n                        <EditableSpan title={todolist.title} changeTitle={changeTodoListTitle}/>\r\n                        <IconButton onClick={removeTodoList} color={'primary'}\r\n                                    size={'small'}>\r\n                            <DeleteForeverOutlinedIcon/>\r\n                        </IconButton>\r\n                    </Typography>\r\n                </Grid>\r\n                <Grid item>\r\n                    <AddItemForm addItem={addTask}/>\r\n                    <List style={{textAlign: 'center'}}>\r\n                        {tasks.map(t => {\r\n                            const removeTask = () => dispatch(removeTaskAC(t.id, props.id))\r\n                            const changeStatus = (e: ChangeEvent<HTMLInputElement>) =>\r\n                                dispatch(changeTaskStatusAC(t.id, e.currentTarget.checked, props.id))\r\n                            const onTitleChangeHandler = (newTitle: string) => {\r\n                                dispatch(changeTaskTitleAC(t.id, newTitle, props.id))\r\n                            }\r\n\r\n                            return (\r\n                                <ListItem key={t.id} divider\r\n                                          style={{display: 'flex', justifyContent: 'space-between'}}>\r\n                                    <Checkbox\r\n                                        checked={t.isDone}\r\n                                        onChange={changeStatus}\r\n                                    />\r\n                                    <EditableSpan title={t.title} changeTitle={onTitleChangeHandler}/>\r\n                                    <IconButton onClick={removeTask}>\r\n                                        <DeleteForeverOutlinedIcon color={'primary'}/>\r\n                                    </IconButton>\r\n                                </ListItem>\r\n                            )\r\n                        })}\r\n                    </List>\r\n                </Grid>\r\n                <div>\r\n                    <ButtonGroup size={'small'} variant={'contained'} disableElevation\r\n                                 fullWidth style={{position: 'absolute', bottom: '0'}}\r\n                    >\r\n                        <Button\r\n                            color={todolist.filter === 'all' ? 'secondary' : 'primary'}\r\n                            onClick={onClickSetAllFilter}\r\n                        >All\r\n                        </Button>\r\n                        <Button\r\n                            color={todolist.filter === 'active' ? 'secondary' : 'primary'}\r\n                            onClick={onClickSetActiveFilter}\r\n                        >Active\r\n                        </Button>\r\n                        <Button\r\n                            color={todolist.filter === 'completed' ? 'secondary' : 'primary'}\r\n                            onClick={onClickSetCompletedFilter}\r\n                        >Completed\r\n                        </Button>\r\n                    </ButtonGroup>\r\n                </div>\r\n\r\n            </div>\r\n        </Grid>\r\n\r\n    )\r\n}\r\n\r\nexport default TodoList1;","import React from 'react';\r\nimport './App.css';\r\nimport {AddItemForm} from \"./Components/AddItemForm\";\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport {addTodolistAC} from \"./store/todolist-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./store/store\";\r\nimport Todolist1 from \"./Components/Todolist1\";\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\"\r\nexport type TodoListType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nfunction AppWithRedux() {\r\n\r\n    const todoLists = useSelector<AppRootStateType, Array<TodoListType>>(state => state.todolists)\r\n    const dispatch = useDispatch()\r\n\r\n    const addTodoList = (title: string) => {\r\n        dispatch(addTodolistAC(title))\r\n    }\r\n\r\n    //UI:\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar style={{justifyContent: \"space-between\"}}>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                        <Typography variant=\"h6\">\r\n                            News\r\n                        </Typography>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        Todolists\r\n                    </Typography>\r\n                    <Button color=\"inherit\" variant={\"outlined\"}>Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container justifyContent={\"center\"} style={{padding: '15px'}}>\r\n                    <AddItemForm addItem={addTodoList}/>\r\n                </Grid>\r\n                <Grid container spacing={4} justifyContent={\"center\"}>\r\n                    {todoLists.map(tl => {\r\n                        return (\r\n                            <Grid item key={tl.id}>\r\n                                <Paper elevation={5}\r\n                                       style={{\r\n                                           padding: '15px',\r\n                                           height: '400px',\r\n                                           width: '300px'\r\n                                       }}>\r\n                                    <div>\r\n                                        <Todolist1\r\n                                            id={tl.id}\r\n                                            key={tl.id}\r\n                                        />\r\n                                    </div>\r\n                                </Paper>\r\n                            </Grid>)\r\n                    })}\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AppWithRedux;\r\n\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {store} from \"./store/store\";\r\nimport {Provider} from \"react-redux\";\r\nimport AppWithRedux1 from \"./AppWithRedux1\";\r\n\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <AppWithRedux1/>\r\n    </Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}